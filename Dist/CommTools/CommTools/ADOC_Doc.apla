(
 '## Overview'
 ''
 'This package comes with functions that allow you to interrogate the user, and make her...'
 ''
 '* answer simple questions like "Are you sure?" or "Really delete this file?"'
 '* select an item (or several items) from a list of items, or quit '
 '                                                                 '
 'This is useful for interacting with the user in the session, something that user commands do'
 'pretty frequently.'
 ''
 '## Interrupting "YesOrNo" and/or "Select"'
 ''
 'Once a user is asked for input one cannot interrupt with neither a weak nor a strong interrupt,'
 'and answering the question or selecting an item and then trying to interrupt the code is on'
 'modern machines not working well since they are just too fast.'
 ''
 '`YesOrNo` as well as `Select` allow you to enter `∘∘∘`, and that make the functions run onto'
 'a stop vector that is dynamically set for just this purpose.                                                                 '
 ''
 '## Automating answers and selections'
 ''
 'First of all, what''s the application for this? Well, in test cases one often needs particular'
 'answers to be given. In such an instance the presence of a human in front of the screen is'
 'required. This feature is designed to make such tests work without a human.  '
 ''
 'Both `YesOrNo` and `Select` can be integrated into tests so that no user is required to'
 'answer any questions, or select any item(s). This is achieved by providing data on global '
 'variables that usually do not exist.'
 ''
 '### `YesOrNo`'
 ''
 'Imagine you are asking this question:'
 '                       '
 '```'
 'CommTools.YesOrNo ''Sure you want to delete this file?'''
 '```'
 ''
 'This can be achieved by creating a global variable `YesOrNo_Answers` as a matrix with two'
 'columns:'
 ''
 '| `[;1]` | Contains the question that should be answered automatically.'
 '| `[;2]` |  The answer to be given, so usually either "y" or "no".'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.YesOrNo_Answers←1 2⍴''Sure you want to delete this file?'' ''y'''
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 'CommTools.YesOrNo ''Sure you want to delete this file?'''
 '```'
 ''
 '`YesOrNo` would do the following:'
 ''
 '1. Check whether there is a global variable `YesOrNo_Answers` around.'
 '2. If there is it would try to match the question to any row of the first column of `YesOrNo_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed'
 '* If multiple entries in `YesOrNo_Answers` match the question an error is thrown'
 '* If the second column is empty `YesOrNo` would return the default answer which is defined by the'
 '  left argument: 1="Y", 0="N"'
 '  '
 '  If there is no left argument provided `YesOrNo` would throw an error'
 '* If no row in `YesOrNo_Answers` matches the question it would ask the question '
 ''
 '#### Dynamic questions'
 '    '
 'Sometimes one has to ask dynamically created questions like "Sure you want to delete the file /foo/boo/this-will-change.txt"'
 ''
 'In this case specify just "Sure you want to delete the file" as the text to be matched: in case of no full match `YesOrNo` '
 'will start looking for questions that _start_ with the text given, so it would still find a hit. '
 ''
 '#### Multiple-line questions                    '
 ''
 '`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that a nested vector'
 'is transformed internally into a simple character vector with `⎕UCS 10` in it)'
 ''
 'In case the two search attempts outlined above are not finding a hit `YesNorNo` would isolate the last bit of the question '
 'and check that for a full match.'
 ''
 'This is best explained by an example:'
 ''
 '```'
 '     q←⊂''file1'''
 '     q,←⊂''file1'''
 '     q,←⊂''Sure you wanna delete these?'''
 '     CommTools.YesOrNo_Answers←1 2⍴ (3⊃q) ''y'''
 '     ⎕←CommTools.YesOrNo q'
 ('y'⋄)
 '```'
 ''
 '### `Select` '
 ''
 'Imagine you are going to present a list with three items, and you need the second one to be selected.'
 ''
 'This can be achieved by creating a global variable `Select_Choices` as a matrix with two'
 'columns:'
 ''
 '| `[;1]` | Contains the caption of the list.'
 '| `[;2]` | The answer to be given, so usually either an integer pointing to the item selected,<<br>>or a vector of integers (in case "a" was entered) or `⍬` (in case "q" was entered).'
 ''
 '`Select` would do the following:'
 ''
 '1. Check whether there is a global variable `Select_Choices` around.'
 '2. If there is it would try to match the caption to any row of the first column of `Select_Choices` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in choices are removed'
 '* If multiple entries in `Select_Choices` match the caption an error is thrown'
 '* If no row in `Select_Choices` matches the caption it would present the list for selection  '
 ''
 'So in our case we specify:'
 ''
 '```'
 '   l←⊂''First'''
 '   l,←⊂''Second'''
 '   l,←⊂''Third'''
 '   caption←''Please select hot item:'''
 '   CommTools.Select_Choices←1 2⍴caption 2'
 '   ⎕←caption CommTools.Select l  '
 ('2'⋄)
 '``` '
 ''
 'For all items:'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''a'''
 '   ⎕←caption CommTools.Select l  '
 '1 2 3'
 '``` '
 ''
 'For no items ("quit"):'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''q'''
 '   ⎕←⍬≡caption CommTools.Select l  '
 ('1'⋄)
 '``` '
 ''
 '#### Specifying a choice'
 '                       '
 'In case you need a specific choice to be returned but don''t know the item number in advance because the list is created '
 'dynamically then instead of specifying an integer you can specify the choice itself.'
 ''
 'For example:'
 ''
 '```'
 '   CommTools.Select_Choices←1 2⍴caption ''Second'''
 '   ⎕←caption CommTools.Select l'
 '2     '
 '```'
 ''
 '### Cleaning up'
 ''
 'Of course there is nothing wrong with deleting the global variables yourself with this:'
 ''
 '```'
 '⎕EX ''CommTools.Select_Choices'''
 '⎕EX ''CommTools.YesOrNo_Answers'''
 '```'
 ''
 'Having said this, you can also just call the function `Cleanup` which will do the job for you.'
 ''
 'Also, in case `CommTools` would be enhanced in the future, `Cleanup` might do more than that, so'
 'calling it rather doing the job yourself it saver as well. '
 ''
)
